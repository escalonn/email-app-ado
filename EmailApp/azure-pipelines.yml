trigger:
  branches:
    include:
    - master
  paths:
    include:
    - EmailApp

pr:
  branches:
    include:
    - master
  paths:
    include:
    - EmailApp

parameters:
- name: runAnalysis
  displayName: Run tests & SonarQube?
  type: boolean
  default: false

variables:
  slnPath: EmailApp

stages:
- stage: build
  jobs:
  - job: build
    condition: ${{ parameters.runAnalysis }}
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: UseDotNet@2
      displayName: dotnet sdk 6
      inputs:
        packageType: 'sdk'
        version: '6.x'

    # for sonar scanner
    # - task: UseDotNet@2
    #   displayName: dotnet runtime 3.1
    #   inputs:
    #     packageType: 'runtime'
    #     version: '3.1.x'

    # - task: SonarCloudPrepare@1
    #   displayName: sonar prepare
    #   inputs:
    #     SonarCloud: 'sonarcloud-escalonn'
    #     organization: '210726-wvu-net-ext'
    #     scannerMode: 'MSBuild'
    #     projectKey: '210726-wvu-net-ext_nick-project2_emailapp'
    #     extraProperties: |
    #       sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/*/coverage.opencover.xml

    - script: dotnet build --configuration Release
      displayName: dotnet build
      workingDirectory: $(slnPath)

    - script: dotnet test
        --configuration Release
        --collect:"XPlat Code Coverage"
        --results-directory $(Agent.TempDirectory)
        --
        DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      displayName: dotnet test
      workingDirectory: $(slnPath)

    # - task: SonarCloudAnalyze@1
    #   displayName: sonar analyze

    # - task: SonarCloudPublish@1
    #   displayName: sonar publish gate
    #   inputs:
    #     pollingTimeoutSec: '300'

    - script: dotnet publish
        --configuration Release
        --output $(Build.StagingDirectory)
      displayName: dotnet publish
      workingDirectory: $(slnPath)

    - publish: $(Build.StagingDirectory)
      displayName: publish app artifact
      artifact: app

  - job: docker
    ${{ if eq(parameters.runAnalysis, true) }}:
      dependsOn: build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: docker build & push
      inputs:
        containerRegistry: 'docker-hub-escalona'
        repository: 'nicholasescalona/emailapp'
        command: 'build'
        Dockerfile: 'EmailApp/Dockerfile'
        buildContext: 'EmailApp'
        tags: '$(Build.BuildId)'
    - task: Docker@2
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      displayName: docker build & push
      inputs:
        containerRegistry: 'docker-hub-escalona'
        repository: 'nicholasescalona/emailapp'
        command: 'push'
        tags: '$(Build.BuildId)'
    - publish: k8s
      artifact: k8s-manifests
      displayName: publish k8s manifests

- stage: deploy
  jobs:
  - deployment: prod
    pool:
      vmImage: ubuntu-latest
    environment: production
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: kubernetes deploy
            inputs:
              action: 'deploy'
              manifests: '$(Pipeline.Workspace)/k8s-manifests/*.yml'
              containers: 'nicholasescalona/emailapp:$(Build.BuildId)'
